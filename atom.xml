<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ian的Blog小屋</title>
  
  <subtitle>好看的皮囊千篇一律，有趣的灵魂万里挑一</subtitle>
  <link href="http://ianblog.top/atom.xml" rel="self"/>
  
  <link href="http://ianblog.top/"/>
  <updated>2023-09-19T13:31:01.562Z</updated>
  <id>http://ianblog.top/</id>
  
  <author>
    <name>Ian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript中的闭包</title>
    <link href="http://ianblog.top/2023/04/23/closure/"/>
    <id>http://ianblog.top/2023/04/23/closure/</id>
    <published>2023-04-23T06:42:36.000Z</published>
    <updated>2023-09-19T13:31:01.562Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>闭包是<code>Javascript</code>中一个重要的特性，使用闭包可以实现特定的需求，例如函数柯里化等。想要弄懂闭包，首先得要对执行上下文和作用域有足够的了解。</p></blockquote><h1 id="什么是执行上下文"><a href="#什么是执行上下文" class="headerlink" title="什么是执行上下文"></a>什么是执行上下文</h1><p>简单来说，执行上下文就是<code>Javascript</code>代码执行的环境。每个上下文都有一个关联的变量对象，在这个上下文中定义的所有变量和函数都存在于这个变量对象上。</p><h2 id="执行上下文的类型"><a href="#执行上下文的类型" class="headerlink" title="执行上下文的类型"></a>执行上下文的类型</h2><ul><li><strong>全局上下文</strong> ：最外层的上下文，在浏览器中指的就是<code>window</code>对象，并且用var定义的全局变量和函数会成为<code>window</code>对象的属性和方法。一个程序中只会有一个全局上下文。</li><li><strong>函数上下文</strong> ：每个函数调用都有自己的上下文。函数上下文可以有任意多个。</li><li><strong><code>Eval()</code>调用内部上下文</strong> ：执行在<code>eval</code>函数内部的代码创建属于自己的上下文。</li></ul><p><code>ECAMScript</code> 程序执行流是通过上下文栈来控制的，当代码执行流进入函数时，函数上下文会被推入栈中，当函数执行完毕时，函数上下文会被弹出栈外，将控制权返还给之前的执行上下文。</p><h1 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域"></a>什么是作用域</h1><p>作用域是程序中定义变量的区域，它决定了当前代码对变量的访问权限。</p><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();  <span class="comment">//  执行函数创建变量</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//  Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>说明：在<code>fn</code> 函数内部创建了一个变量<code>a</code> ，但是在全局访问的时候，系统报错。可见，全局是无法获取函数内部的变量。</p><h2 id="作用域的分类"><a href="#作用域的分类" class="headerlink" title="作用域的分类"></a>作用域的分类</h2><ul><li><p><strong>全局作用域</strong> ：在全局范围内声明的变量（<strong>特殊情况</strong>：在函数中不使用关键字声明变量也会成为全局变量）处于全局作用域下，可以在程序的任意地方访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">display</span>();  <span class="comment">//  打印 0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数作用域</strong> ：也称局部作用域，在函数内部声明的变量处于函数作用域下，不能再函数以外的位置访问（闭包除外）。</p></li><li><p><strong>块级作用域</strong> ：<code>ES6</code>引入的<code>let</code>和<code>const</code> 关键字在大括号中定义的变量处于块级作用域中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//  打印 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//  Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p><code>JavaScript</code> 遵循的是词法作用域。词法作用域也称静态作用域，是指变量的作用域在创建时就确定好了，而不是执行时才确定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bar</span>();  <span class="comment">//  输出 0</span></span><br></pre></td></tr></table></figure><p>上述代码执行<code>bar</code> 函数，输出的是0，而不是1，说明在<code>bar</code>中调用<code>foo</code> ，函数<code>foo</code> 是访问不到<code>bar</code> 内部的变量。因为<code>foo</code> 处在全局作用域中，而<code>bar</code> 中的变量<code>a</code>是处在函数作用域中。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote><p>在上面，我们知道了处在不同作用域的代码具有不同的访问权限。但是我们还不清楚访问变量是什么样的流程，访问一个变量到底是遵循什么样的规则？当有多个同名的变量可供访问时，选取哪一个？这些问题需要借助作用域链来解决。</p></blockquote><p>上下文中的代码在执行时，会创建变量对象的一个<strong>作用域链</strong>。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序。作用域链的顶端（也就是第一个变量对象）<strong>始终</strong>是代码正在执行的上下文，下一个变量对象是来自包含上下文，最后一个变量对象<strong>始终</strong>是全局上下文。</p><p>代码执行时的标识符解析是通过沿作用域链逐级搜索标识符名称完成的。搜索从顶端开始，逐级往后，直至搜索到标识符，或者搜索到了全局作用域为止。</p><p>看个小例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> anotherColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">swapColors</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> tempColor = anotherColor;</span><br><span class="line">        anotherColor = color;</span><br><span class="line">        color = tempColor;</span><br><span class="line">        <span class="comment">//  这里能访问color,anotherColor,tempColor</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  这里能访问color, anotherColor,但是访问不了tempColor</span></span><br><span class="line">    <span class="title function_">swapColors</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里只能访问color</span></span><br><span class="line"><span class="title function_">changeColor</span>();</span><br></pre></td></tr></table></figure><p>上述代码涉及三个上下文，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">window</span><br><span class="line">|__color</span><br><span class="line">|__changeColor()</span><br><span class="line">  |__anotherColor</span><br><span class="line">  |__swapColors()</span><br><span class="line">    |__tempColor</span><br></pre></td></tr></table></figure><p>内部的上下文可以访问外部上下文的变量和函数，反之不行。</p><h3 id="作用域链增强"><a href="#作用域链增强" class="headerlink" title="作用域链增强"></a>作用域链增强</h3><p>有两种情况可以增强作用域链，它们都会在作用域的前端添加一个变量对象：</p><ul><li><code>try/catch</code> 语句的<code>catch</code>  块：创建一个新的变量对象，包含要抛出的错误。</li><li><code>with</code> 语句：添加一个指定的对象。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> qs = <span class="string">&quot;?debug=true&quot;</span>;</span><br><span class="line">  <span class="title function_">with</span>(<span class="params">location</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> url = href + qs;  <span class="comment">//  块级作用域</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">buildUrl</span>();  <span class="comment">//  ReferenceError: url is not defined</span></span><br></pre></td></tr></table></figure><h1 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h1><p>闭包是指哪些引用了另一个函数作用域中的变量的函数，通常是在嵌套函数中实现的。看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();  <span class="comment">//  0</span></span><br></pre></td></tr></table></figure><p>上述代码中内部函数的输出语句，引用了外部函数的变量，在这个内部函数被返回并在其他地方调用后，仍然引用着该变量。因为内部函数的作用域链包含了外部函数和全局的变量对象。</p><h2 id="闭包的应用"><a href="#闭包的应用" class="headerlink" title="闭包的应用"></a>闭包的应用</h2><p>闭包能够使函数在其他地方调用时，也能够访问到其外部函数的变量。这使得其在特定场景下具有重要的应用。</p><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><p>函数柯里化是指将一个接收多个参数的函数拆分成多个只接受单个参数的函数。其优势是能够实现参数的复用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">w, h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> w * h;</span><br><span class="line">&#125;  <span class="comment">//  求面积，但是需要一直传入宽和高，如果宽固定而高变化，就不能实现复用</span></span><br><span class="line"><span class="keyword">const</span> a1 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="title function_">getArea</span>(<span class="number">10</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">w</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">h</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> w * h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  <span class="comment">//  柯里化之后，内部返回新的函数只接收高</span></span><br><span class="line"><span class="keyword">const</span> getTenWidthArea = <span class="title function_">getArea</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> a = <span class="title function_">getTenWidthArea</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="实现私有变量"><a href="#实现私有变量" class="headerlink" title="实现私有变量"></a>实现私有变量</h3><p>使用闭包可以轻松实现私有变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  count += val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line"><span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">decrement</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getCount</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter1 = <span class="title function_">counter</span>();</span><br><span class="line"><span class="keyword">const</span> counter2 = <span class="title function_">counter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter1.<span class="title function_">getCount</span>());  <span class="comment">//  0</span></span><br><span class="line">counter1.<span class="title function_">increment</span>();</span><br><span class="line">counter1.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter1.<span class="title function_">getCount</span>());  <span class="comment">//  2</span></span><br><span class="line">counter1.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter1.<span class="title function_">getCount</span>());  <span class="comment">//  1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter2.<span class="title function_">getCount</span>());  <span class="comment">//  0</span></span><br></pre></td></tr></table></figure><p>上述函数返回包含了特权方法的对象，能够访问函数内部的私有变量以及已有方法。<code>counter1</code> 和<code>counter2</code> 分别维护各自的私有变量，互不影响。</p><p>总的来说，闭包可以延长变量的生命周期。即使外部函数执行完毕返回结果了，其活动变量并不会销毁，因为内部函数的作用域链仍有它的引用。</p><h2 id="闭包的问题"><a href="#闭包的问题" class="headerlink" title="闭包的问题"></a>闭包的问题</h2><p>因为闭包会保留它们包含函数额作用域，所以比其他函数更占内存。过渡使用可能导致内存过渡占用。而且在处理速度和内存消耗方面对脚本具有负面影响。因此建议仅在十分必要时使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">foo</span>();</span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line">bar = <span class="literal">null</span>;  <span class="comment">//  解除对函数的引用，这样就可以释放内存了</span></span><br></pre></td></tr></table></figure><p>Done！😊！</p>]]></content>
    
    
    <summary type="html">本文介绍了JavaScript当中闭包相关的概念</summary>
    
    
    
    <category term="JavaScript进阶" scheme="http://ianblog.top/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JavaScript" scheme="http://ianblog.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——队列</title>
    <link href="http://ianblog.top/2023/04/19/queue/"/>
    <id>http://ianblog.top/2023/04/19/queue/</id>
    <published>2023-04-19T03:21:01.000Z</published>
    <updated>2023-09-19T13:22:23.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>队列是一种<strong>先进先出</strong>的数据结构。</p></blockquote><h2 id="队列是什么？"><a href="#队列是什么？" class="headerlink" title="队列是什么？"></a>队列是什么？</h2><p>对列遵循<strong>先进先出（FIFO）</strong>，在队列尾部添加元素，在顶部移除元素。</p><p>队列在日常生活中是很常见的，比如买票排队。</p><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><p>由于队列是从顶部移除元素，所以不仅需要获取队列尾部，还需要定义变量记录队列顶部位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;; <span class="comment">// 队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastPos</span> = <span class="number">0</span>; <span class="comment">// 追踪最后元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstPos</span> = <span class="number">0</span>; <span class="comment">// 追踪第一个元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是一些方法了：最基础的就是添加与删除了</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>enqueue</code>(element)</td><td>添加元素</td></tr><tr><td><code>dequeue()</code></td><td>删除第一项元素并返回</td></tr><tr><td><code>front()</code></td><td>返回队列第一项元素</td></tr><tr><td><code>isEmpty()</code></td><td>检查队列是否为空</td></tr><tr><td><code>size()</code></td><td>返回队列长度</td></tr><tr><td><code>clear()</code></td><td>清空队列</td></tr><tr><td><code>toString()</code></td><td>以字符串的方式打印队列</td></tr></tbody></table><h3 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h3><p>以<code>lastPos</code>作为键，将元素添加进队列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enqueue</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">lastPos</span>] = element;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastPos</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2. 删除元素"></a>2. 删除元素</h3><p>首先取得首个元素，然后将其删除，要注意的是，删除首个元素之后，它的下一个元素就成了首个元素了，所以需要将<code>firstPos</code>的值更新。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">firstPos</span>];</span><br><span class="line">  <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">firstPos</span>];</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstPos</span>++; <span class="comment">// 自增，首个元素的索引后移</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-第一项元素"><a href="#3-第一项元素" class="headerlink" title="3. 第一项元素"></a>3. 第一项元素</h3><p><code>firstPos</code>用来追踪第一项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">front</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">firstPos</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-队列是否为空"><a href="#4-队列是否为空" class="headerlink" title="4. 队列是否为空"></a>4. 队列是否为空</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastPos</span> - <span class="variable language_">this</span>.<span class="property">firstPos</span> === <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 或者为了复用方法</span></span><br><span class="line">  <span class="comment">// return this.size() === 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-队列长度"><a href="#5-队列长度" class="headerlink" title="5. 队列长度"></a>5. 队列长度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">lastPos</span> - <span class="variable language_">this</span>.<span class="property">firstPos</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-清空队列"><a href="#6-清空队列" class="headerlink" title="6. 清空队列"></a>6. 清空队列</h3><p>重置队列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">lastPos</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">firstPos</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-打印队列"><a href="#7-打印队列" class="headerlink" title="7. 打印队列"></a>7. 打印队列</h3><p>将队列中的元素以字符串的形式打印出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="variable language_">this</span>.firstPos]&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">firstPos</span> + <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">lastPos</span>; i++) &#123;</span><br><span class="line">    str += <span class="string">`,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>();</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;ian&#x27;</span>);</span><br><span class="line">queue.<span class="title function_">enqueue</span>(<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">toString</span>()); <span class="comment">// &#x27;ian,jack&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">size</span>()); <span class="comment">// 2</span></span><br><span class="line">queue.<span class="title function_">dequeue</span>(); <span class="comment">// &#x27;ian&#x27;</span></span><br><span class="line">queue.<span class="title function_">dequeue</span>(); <span class="comment">// &#x27;jack&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">toString</span>()); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>上面我们创建出了一个队列，实现了从队列尾部添加元素，顶部移除元素。如果我们还想要实现从队列尾部删除元素，从顶部添加元素呢？这就需要借助双端队列了。</p><p><strong>双端队列</strong>是一种允许我们同时从队列顶部和尾部添加和移除元素的特殊队列。有了这样的结构，双端队列既能实现<strong>先进先出</strong>又能实现<strong>后进先出</strong>，所以可以将其看作队列和栈相结合的一种数据结构。</p><h3 id="创建双端队列"><a href="#创建双端队列" class="headerlink" title="创建双端队列"></a>创建双端队列</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line">  constructor &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstPos</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastPos</span> = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于双端队列非常类似于队列与栈的结合，所以其方法也是类似的，这里就不再累述了。唯一不同的就是，双端队列还需要实现从顶部添加元素的方法。</p><h4 id="顶部添加元素"><a href="#顶部添加元素" class="headerlink" title="顶部添加元素"></a>顶部添加元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addFront</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123; <span class="comment">// 若为空，则直接添加</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">enqueue</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">firstPos</span> &gt; <span class="number">0</span>) &#123; <span class="comment">// 若顶部有空位则添加至空位</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstPos</span>--;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">firstPos</span>] = element;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若顶部无空位，则将元素整体往后推一位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">lastPos</span>; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">items</span>[i] = <span class="variable language_">this</span>.<span class="property">items</span>[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastPos</span>++;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstPos</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span>[<span class="number">0</span>] = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用队列解决问题"><a href="#利用队列解决问题" class="headerlink" title="利用队列解决问题"></a>利用队列解决问题</h2><h3 id="1-击鼓传花"><a href="#1-击鼓传花" class="headerlink" title="1. 击鼓传花"></a>1. 击鼓传花</h3><h3 id="2-回文检查"><a href="#2-回文检查" class="headerlink" title="2. 回文检查"></a>2. 回文检查</h3>]]></content>
    
    
    <summary type="html">本文介绍了常见的数据结构——队列</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://ianblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="JavaScript" scheme="http://ianblog.top/tags/JavaScript/"/>
    
    <category term="数据结构" scheme="http://ianblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构——栈</title>
    <link href="http://ianblog.top/2023/04/17/stack/"/>
    <id>http://ianblog.top/2023/04/17/stack/</id>
    <published>2023-04-17T01:21:01.000Z</published>
    <updated>2023-09-18T11:44:12.685Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>栈是一种<strong>后进先出</strong>的数据结构，具有广泛的应用。</p></blockquote><h2 id="栈数据结构"><a href="#栈数据结构" class="headerlink" title="栈数据结构"></a>栈数据结构</h2><p>栈遵循后进先出（LIFO）原则。新添加的元素保存在栈顶，待删除的元素也是从栈顶开始删除；在栈的另一端就叫栈底。</p><p>栈非常适合用于保存浏览器的历史记录，新产生的记录压入栈顶，显示新页面，等到点击回退按钮之后，就将当前栈顶的记录弹出，重新显示上一次的页面。</p><h2 id="创建一个栈"><a href="#创建一个栈" class="headerlink" title="创建一个栈"></a>创建一个栈</h2><p>栈需要满足保存一系列元素，并且轻松实现添加以及删除元素，这让我们很容易想到<strong>数组</strong>。因为数组本身具备操作元素的方法，例如<code>push</code>、<code>pop</code>、<code>unshift</code>、<code>shift</code>等等。事实上，利用对象也是能够实现的，继续往下看 😀。</p><h3 id="基于数组的栈"><a href="#基于数组的栈" class="headerlink" title="基于数组的栈"></a>基于数组的栈</h3><p>首先创建一个栈类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = []; <span class="comment">// 用于保存元素</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来要思考：栈需要实现什么样的方法？</p><p>当然，最基本的添加与删除是毋庸置疑的。除此之外，还应当实现方法来方便获取栈顶元素，元素个数，以及重置栈。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>push(element)</code></td><td>添加一个或者几个元素到栈顶</td></tr><tr><td><code>pop()</code></td><td>移除并返回栈顶元素</td></tr><tr><td><code>peek()</code></td><td>返回栈顶的元素（并不移除）</td></tr><tr><td><code>isEmpty()</code></td><td>检查栈是否为空</td></tr><tr><td><code>clear()</code></td><td>清空栈</td></tr><tr><td><code>size()</code></td><td>返回栈中元素个数</td></tr><tr><td><code>toString()</code></td><td>以字符串形式打印出所有元素</td></tr></tbody></table><h4 id="1-添加元素"><a href="#1-添加元素" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h4><p>利用数组的<code>push</code>方法很容易实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">push</span>(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2. 删除元素"></a>2. 删除元素</h4><p>利用数组的<code>pop</code>方法很容易实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">pop</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-查看栈顶元素"><a href="#3-查看栈顶元素" class="headerlink" title="3. 查看栈顶元素"></a>3. 查看栈顶元素</h4><p>相当于是获取数组中最后一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-检查栈是否为空"><a href="#4-检查栈是否为空" class="headerlink" title="4. 检查栈是否为空"></a>4. 检查栈是否为空</h4><p><code>length</code>属性反映了数组元素的个数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-清空栈"><a href="#5-清空栈" class="headerlink" title="5. 清空栈"></a>5. 清空栈</h4><p>这里简单粗暴，直接将空数组赋值给了<code>items</code>，也可以循环调用<code>pop</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-元素个数"><a href="#6-元素个数" class="headerlink" title="6. 元素个数"></a>6. 元素个数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-打印元素"><a href="#7-打印元素" class="headerlink" title="7. 打印元素"></a>7. 打印元素</h4><p>直接使用数组身上的<code>toString</code>方法（将元素以逗号分隔的字符串形式返回）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">isEmpty</span>()); <span class="comment">// true</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>); <span class="comment">// 添加元素2</span></span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">5</span>); <span class="comment">// 添加元素5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">size</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">isEmpty</span>()); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">toString</span>()); <span class="comment">// &quot;2,5&quot;</span></span><br><span class="line">stack.<span class="title function_">pop</span>(); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">peek</span>()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="基于对象的栈"><a href="#基于对象的栈" class="headerlink" title="基于对象的栈"></a>基于对象的栈</h3><p>首先创建一个栈类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>() &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>; <span class="comment">// 记录栈的大小</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的是，这里我们借助了<code>count</code>来记录栈的大小，因为对象不像数组拥有<code>length</code>属性。</p><h4 id="1-添加元素-1"><a href="#1-添加元素-1" class="headerlink" title="1. 添加元素"></a>1. 添加元素</h4><p>直接使用<code>count</code>作为键名，<code>element</code>作为键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>] = element;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span>++; <span class="comment">// 自增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-删除元素-1"><a href="#2-删除元素-1" class="headerlink" title="2. 删除元素"></a>2. 删除元素</h4><p>首先需要检查栈是否为空，若为空，则返回 undefined。对象删除元素，需要手动修改 count 的值，并且删除之前先将其保存以便返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span>--; <span class="comment">// 递减</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line">  <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span>];</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-检查栈是否为空"><a href="#3-检查栈是否为空" class="headerlink" title="3. 检查栈是否为空"></a>3. 检查栈是否为空</h4><p>直接判断<code>count</code>的值就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-查看栈顶元素"><a href="#4-查看栈顶元素" class="headerlink" title="4. 查看栈顶元素"></a>4. 查看栈顶元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">peek</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">items</span>[<span class="variable language_">this</span>.<span class="property">count</span> - <span class="number">1</span>]; <span class="comment">// 栈顶元素是最后一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-清空栈-1"><a href="#5-清空栈-1" class="headerlink" title="5. 清空栈"></a>5. 清空栈</h4><p>将栈的状态重置为最初状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">clear</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">items</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-元素个数-1"><a href="#6-元素个数-1" class="headerlink" title="6. 元素个数"></a>6. 元素个数</h4><p>只需要简单返回count的值就行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-打印元素-1"><a href="#7-打印元素-1" class="headerlink" title="7. 打印元素"></a>7. 打印元素</h4><p>数组版本中，数组实例身上有<code>toString()</code>方法，该方法可以将元素转换成以逗号分隔的字符串形式。但是对象需要我们手动实现一个方法打印其所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 若为空，则返回空字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.items[<span class="number">0</span>]&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">count</span>; i++) &#123;</span><br><span class="line">    objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.items[i]&#125;</span>`</span>; <span class="comment">// 动态拼接字符串即可</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> objString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的使用"><a href="#栈的使用" class="headerlink" title="栈的使用"></a>栈的使用</h2><h3 id="1-十进制转换"><a href="#1-十进制转换" class="headerlink" title="1. 十进制转换"></a>1. 十进制转换</h3><p>十进制转换为其他的进制，相信大家都很熟悉：将十进制数除以要转换的进制数，对商取整，直到结果为0，然后将每次计算的余数拼接就得到了对应的进制数（要特别注意的是有的数需要转成字母）。</p><p>看下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgts = <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>; <span class="comment">// 进制数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">decNumber, base</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> num = decNumber;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>(); <span class="comment">// 栈</span></span><br><span class="line">  <span class="keyword">let</span> rem = <span class="number">0</span>; <span class="comment">// 余数</span></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span>; <span class="comment">// 待拼接的字符串</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!(base &gt;= <span class="number">2</span> &amp;&amp; base &lt;= <span class="number">36</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>; <span class="comment">// 边界情况，不能实现转换，返回空字符串</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    rem = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number % base); <span class="comment">// 取余</span></span><br><span class="line">    stack.<span class="title function_">push</span>(rem); <span class="comment">// 添加余数</span></span><br><span class="line">    number = <span class="title class_">Math</span>.<span class="title function_">floor</span>(number / base); <span class="comment">// 更新number的值</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">while</span>(!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    str += dgts[stack.<span class="title function_">pop</span>()]; <span class="comment">// 拼接余数，从栈顶开始并且要做转换</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">return</span> str; <span class="comment">// 返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">convert</span>(<span class="number">10</span>, <span class="number">2</span>); <span class="comment">// 1010</span></span><br><span class="line"><span class="title function_">convert</span>(<span class="number">1021</span>, <span class="number">16</span>); <span class="comment">//3fd</span></span><br></pre></td></tr></table></figure><h3 id="2-平衡括号"><a href="#2-平衡括号" class="headerlink" title="2. 平衡括号"></a>2. 平衡括号</h3><p>每个左括号都必须要有对应的右括号，才算平衡，例如<code>((&#123;&#125;)&#123;&#125;([])())</code>。不平衡的如<code>(()</code>、<code>&#123;[)&#125;</code>等。基本的思路是，将左括号压入栈中，每次遇到右括号，就进行判断，看当前栈顶的括号是否与右括号对应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> left = <span class="string">&#x27;([&#123;&#x27;</span>; <span class="comment">// 左括号</span></span><br><span class="line"><span class="keyword">const</span> right = <span class="string">&#x27;)]&#125;&#x27;</span>; <span class="comment">// 右括号</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">parenthesesChecker</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>(); <span class="comment">// 栈</span></span><br><span class="line">  <span class="keyword">let</span> balanced = <span class="literal">true</span>; <span class="comment">// 是否平衡</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">// 循环变量</span></span><br><span class="line">  <span class="keyword">let</span> symbol; <span class="comment">// 字符</span></span><br><span class="line">  <span class="keyword">let</span> top; <span class="comment">// 栈顶字符</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (i &lt; symbols.<span class="property">length</span> &amp;&amp; balanced) &#123;</span><br><span class="line">    symbol = symbols[i]; <span class="comment">// 对应索引的字符</span></span><br><span class="line">    <span class="keyword">if</span> (left.<span class="title function_">indexOf</span>(symbol) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(symbol); <span class="comment">// 压入</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.<span class="title function_">isEmpty</span>()) &#123; <span class="comment">// 遇到右括号但是栈为空</span></span><br><span class="line">      balanced = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      top = stack.<span class="title function_">pop</span>(); <span class="comment">// 栈顶元素</span></span><br><span class="line">      <span class="keyword">if</span> (!(left.<span class="title function_">indexOf</span>(top) === right.<span class="title function_">indexOf</span>(symbol))) &#123; <span class="comment">// 左右括号比较</span></span><br><span class="line">        balanced = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> balanced &amp;&amp; stack.<span class="title function_">isEmpty</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了常见的数据结构——栈</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://ianblog.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="JavaScript" scheme="http://ianblog.top/tags/JavaScript/"/>
    
    <category term="数据结构" scheme="http://ianblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的继承</title>
    <link href="http://ianblog.top/2023/04/15/js-extends/"/>
    <id>http://ianblog.top/2023/04/15/js-extends/</id>
    <published>2023-04-15T12:11:06.000Z</published>
    <updated>2023-09-18T01:48:53.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>ECMAScript 2015 </code>支持<code>class</code>关键字，正式引入了类的概念。但在此之前，通过原型链以及构造函数的方式也可以模拟类的特性。</p></blockquote><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="什么是原型"><a href="#什么是原型" class="headerlink" title="什么是原型?"></a>什么是<strong>原型</strong>?</h3><p>在 JS 中，每个函数（箭头函数除外）都会创建出一个<code>prototype</code>属性，该属性作为一个指针，指向保存了实例应该共享的属性和方法的对象。并且该对象会自动获得一个名为<code>constructor</code>的属性，指回与之关联的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// &#123;constructor: f Person(), __propto__: Object&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="实例属性共享"><a href="#实例属性共享" class="headerlink" title="实例属性共享"></a>实例属性共享</h3><p>通过给原型对象添加属性和方法，可以被对象实例共享（这也是为什么明明对象自身没有指定的属性，但却能够读取出值来的原因）。这样做的好处是，不用给每个实例单独定义属性和方法，一劳永逸。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;ian&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// &quot;ian&quot;</span></span><br><span class="line">p.<span class="title function_">sayName</span>(); <span class="comment">// &quot;ian&quot;</span></span><br></pre></td></tr></table></figure><h3 id="构造函数、原型、实例之间的关系"><a href="#构造函数、原型、实例之间的关系" class="headerlink" title="构造函数、原型、实例之间的关系"></a>构造函数、原型、实例之间的关系</h3><p>关键在于理解这一点：<strong>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有</strong>。</p><p>使用<code>new</code>关键字创建实例，实例内部的<code>[[Prototype]]</code>指针会指向原型对象。需要说明的是：原型对象本身是<code>Object</code>的实例（如果没有重新赋值的话），所以它也有原型。如果原型是另一个类型的实例，那么实例与原型之间通过像链一样的形式连接起来，构成了<strong>原型链</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// &#123;constructor: f Person(), __propto__: Object&#125;</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在通过对象访问属性的时候，先是会搜索对象本身，如果没找到，则会顺着指针进入原型对象，若还是没找到，则继续沿着原型链寻找，直至找到或者原型对象变为<code>null</code>（类似于变量查询的方式）。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>继承这个概念很好理解，比如现实生活中，某某某继承了他父亲留下的亿万资产、这个小孩继承了家族优秀的基因…继承描述的就是对象获取到了什么（属性和方法）。</p></blockquote><h3 id="ES5-之前的继承方式"><a href="#ES5-之前的继承方式" class="headerlink" title="ES5 之前的继承方式"></a>ES5 之前的继承方式</h3><p>在这一阶段的继承主要是通过原型链的方式实现的。</p><h4 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h4><p>主要思路就是：使一个构造函数的原型对象指向另一个构造函数的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;lee&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>(); <span class="comment">// 重写子类原型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">sayName</span>); <span class="comment">// &quot;lee&quot;</span></span><br></pre></td></tr></table></figure><p>优点：这种继承方式的好处在于，子类的实例能够继承父类实例以及原型上的属性和方法。</p><p>缺点：原型中如果出现引用类型，实例之间会出现属性共享的问题（修改属性会反映到所有的实例上）；子类实例化无法给父类型传递参数。</p><h4 id="2-盗用构造函数继承"><a href="#2-盗用构造函数继承" class="headerlink" title="2. 盗用构造函数继承"></a>2. 盗用构造函数继承</h4><p>主要思路是：在子构造函数中调用父构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hobby</span> = [<span class="string">&quot;sing&quot;</span>, <span class="string">&quot;dance&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;lee&quot;</span>); <span class="comment">// 调用父构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">s1.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&quot;eat&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">hobby</span>); <span class="comment">// [&quot;sing&quot;, &quot;dance&quot;, &quot;eat&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2.<span class="property">hobby</span>); <span class="comment">// [&quot;sing&quot;, &quot;dance&quot;]</span></span><br></pre></td></tr></table></figure><p>优点：通过<code>call</code>或者<code>apply</code>方法改变<code>this</code>值，可以实现传参；并且每个实例之间有单独的属性（不共享）。</p><p>缺点：子类型无法访问到父类型原型上的属性和方法；而且要实现方法的继承，必须在构造函数中定义方法，因此函数不能重用。</p><h4 id="3-组合式继承（伪经典继承）"><a href="#3-组合式继承（伪经典继承）" class="headerlink" title="3. 组合式继承（伪经典继承）"></a>3. 组合式继承（伪经典继承）</h4><p>主要思路：结合原型链继承和盗用构造函数继承，通过原型链继承原型上的属性和方法，盗用构造函数继承实例属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">functon <span class="title class_">Son</span>(name, age) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) <span class="comment">// 继承实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>() <span class="comment">// 继承原型方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ian&quot;</span>, <span class="number">18</span>)</span><br><span class="line">s.<span class="title function_">sayName</span>() <span class="comment">// &quot;ian&quot;</span></span><br></pre></td></tr></table></figure><p>优点：弥补了原型链继承和盗用构造函数继承的不足。</p><p>缺点：需要调用两次父构造函数；并且实例属性会覆盖原型上同名属性。</p><h4 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h4><p>主要思路：封装一个<code>object</code>函数，其中临时创建构造函数，以传入对象作为其原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>(); <span class="comment">// 相当于给实例指定了原型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ian&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;jack&quot;</span>, <span class="string">&quot;marry&quot;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="title function_">object</span>(person);</span><br><span class="line">person1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;lucas&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// &quot;ian&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>); <span class="comment">// [&quot;jack&quot;, &quot;marry&quot;, &quot;lucas&quot;]</span></span><br></pre></td></tr></table></figure><p>优点：不需要单独创建构造函数。</p><p>缺点：实例之间引用值共享问题。</p><h4 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h4><p>主要思路：其实是类似于原型式继承的，在其基础上增强了对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">creatAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title function_">object</span>(original);</span><br><span class="line">  <span class="comment">// 增强对象</span></span><br><span class="line">  obj.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;ian&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title function_">creatAnother</span>(person);</span><br><span class="line">anotherPerson.<span class="title function_">sayHi</span>(); <span class="comment">// &quot;hi&quot;</span></span><br></pre></td></tr></table></figure><p>优点：同样不需要单独创建构造函数，只关注对象。</p><p>缺点：实例之间引用值共享问题；并且通过这种方式给实例添加方法是不能重用的。</p><h4 id="6-寄生式组合继承"><a href="#6-寄生式组合继承" class="headerlink" title="6. 寄生式组合继承"></a>6. 寄生式组合继承</h4><p>主要思路：不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本（寄生式继承父类原型）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">Son, Parent</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title function_">object</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建对象</span></span><br><span class="line">  prototype.<span class="property">constuctor</span> = <span class="title class_">Son</span>; <span class="comment">// 增强对象</span></span><br><span class="line">  <span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 赋值对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 继承实例属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Son</span>, <span class="title class_">Parent</span>); <span class="comment">// 继承原型属性</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;ian&quot;</span>, <span class="number">18</span>);</span><br><span class="line">s1.<span class="title function_">sayName</span>(); <span class="comment">// &quot;ian&quot;</span></span><br><span class="line">s1.<span class="title function_">sayAge</span>(); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>优点：解决了组合式继承存在的效率问题（父构造函数调用两次）；可以说是引用类型继承的最佳模式。</p><h3 id="ES6中的继承"><a href="#ES6中的继承" class="headerlink" title="ES6中的继承"></a><code>ES6</code>中的继承</h3><p><code>ES6</code>引入的<code>class</code>关键字具有正式定义类的能力。事实上，类是<code>ECMAScript</code>中的语法糖结构，其背后的思想仍然是原型和构造函数。</p><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><p>使用<code>extends</code>关键字可以完成继承，能继承任何拥有<code>[[Constructor]]</code>和原型的对象（包括类以及构造函数）。类和原型上的方法都会都带到派生类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="title function_">prompt</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">showClass</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;&#125; <span class="comment">// 继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">prompt</span>(<span class="string">&quot;foo&quot;</span>); <span class="comment">// &quot;foo&quot;</span></span><br><span class="line">b.<span class="title function_">prompt</span>(<span class="string">&quot;bar&quot;</span>); <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">showClass</span>(<span class="string">&quot;Foo&quot;</span>); <span class="comment">// &quot;Foo&quot;</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="title function_">showClass</span>(<span class="string">&quot;Bar&quot;</span>); <span class="comment">// &quot;Bar&quot;</span></span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>派生类的方法可以通过<code>super</code>引用它们的原型，但仅限于类构造函数、实例方法和静态方法内部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">contructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">hasEngine</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">// 相当于super.constructor()</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">identify</span>(); <span class="comment">// &quot;ok&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>super</code>不是必须要调用的。如果没有定义类构造函数，在实例化派生类时会自动调用<code>super()</code>，而且会传入传给派生类的参数。但是如果派生类显式定义了构造函数，那么必须调用<code>super()</code>或者返回一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(); <span class="comment">// 调用super</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;; <span class="comment">// 返回对象</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">本文介绍了JavaScript当中常见的实现继承的方式</summary>
    
    
    
    <category term="JavaScript进阶" scheme="http://ianblog.top/categories/JavaScript%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JavaScript" scheme="http://ianblog.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
